{"version":3,"file":"static/js/898.c6e40b21.chunk.js","mappings":"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","sources":["redux/selectors.js","components/ContactList/ContactItem/ContactItem.styled.js","components/ContactList/ContactItem/ContactItem.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","pages/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\nexport const selectVisibleFilter = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name?.toLowerCase()?.includes(filter.toLowerCase())\n    );\n  }\n);\n","import styled from 'styled-components';\nexport const Item = styled.div`\n  border: 1px solid black;\n  border-radius: 10px;\n  display: flex;\n  justify-content: space-between;\n  padding: 10px;\n  margin-top: 10px;\n  background: #afb4eb;\n`;\nexport const Btn = styled.button`\n  width: 80px;\n  height: auto;\n  padding: 3px;\n  border-radius: 15px;\n  border: transparent;\n  cursor: pointer;\n  &:hover,\n  &:focus {\n    background-color: #6363e7d4;\n  }\n`;\nexport const Text = styled.p`\n  margin: 0;\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 1.16;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\nimport { Item, Text, Btn } from './ContactItem.styled';\n\nconst ContactListItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const onDeleteContact = () => dispatch(deleteContact(id));\n  return (\n    <Item>\n      <Text>\n        {name}: {number}\n      </Text>\n      <Btn type=\"buttom\" onClick={onDeleteContact}>\n        Delete\n      </Btn>\n    </Item>\n  );\n};\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\nexport default ContactListItem;\n","import styled from 'styled-components';\nexport const List = styled.ul`\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  justify-items: center;\n`;\n","import React from 'react';\nimport { selectVisibleFilter } from 'redux/selectors';\nimport { useSelector } from 'react-redux';\nimport ContactListItem from './ContactItem/ContactItem';\nimport { List } from './ContactList.styled';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectVisibleFilter);\n  return (\n    <List>\n      {contacts.map(({ id, name, phone }) => (\n        <li key={id}>\n          <ContactListItem id={id} name={name} number={phone} />\n        </li>\n      ))}\n    </List>\n  );\n};\nexport default ContactList;\n","import styled from 'styled-components';\nimport { Form, Field } from 'formik';\nexport const Forma = styled(Form)`\n  width: 100%;\n  display: block;\n  justify-content: space-between;\n  flex-wrap: wrap;\n`;\nexport const Label = styled.label`\n  width: 100%;\n  font-size: 24px;\n  font-weight: 500;\n`;\nexport const Input = styled(Field)`\n  border-radius: 10px;\n  padding: 5px 15px;\n  font-size: 18px;\n  font-weight: 500;\n  flex-wrap: wrap;\n\n  height: 100%;\n  width: 90%;\n  margin: 15px 0;\n  outline: none;\n  cursor: pointer;\n  &:hover,\n  &:focus {\n    border-color: blue;\n  }\n`;\nexport const Btn = styled.button`\n  width: 150px;\n  height: 30px;\n  background: white;\n  font-size: 16px;\n  font-weight: 500;\n  border-radius: 10px;\n  justify-content: center;\n  text-align: center;\n  align-items: center;\n  cursor: pointer;\n  &:hover,\n  &:focus {\n    border-color: blue;\n    background-color: #6363e7d4;\n  }\n`;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/operations';\nimport { Formik } from 'formik';\nimport { Forma, Label, Input, Btn } from './ContactForm.styled';\nimport { selectContacts } from 'redux/selectors';\n\nexport const ContactForms = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const handleSubmit = (values, { resetForm }) => {\n    resetForm();\n    const duplicate = contacts.find(contact => contact.name === values.name);\n    if (duplicate) {\n      alert(`${values.name} is already in contakts`);\n      return;\n    }\n    dispatch(addContact(values));\n  };\n\n  return (\n    <Formik initialValues={{ name: '', phone: '' }} onSubmit={handleSubmit}>\n      <Forma autoComplete=\"off\">\n        <Label htmlFor=\"name\">Name</Label>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n        <Label htmlFor=\"name\">Number</Label>\n        <Input\n          type=\"tel\"\n          name=\"phone\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n        <Btn type=\"submit\">Add contact</Btn>\n      </Forma>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\nexport const Label = styled.label`\n  font-weight: 500;\n  font-size: 18px;\n  display: block;\n  text-align: center;\n`;\n\nexport const Input = styled.input`\n  margin-left: 20px;\n  border-radius: 10px;\n\n  padding: 5px 15px;\n  outline: none;\n  cursor: pointer;\n  &:hover,\n  &:focus {\n    border-color: blue;\n  }\n`;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filtersSlice';\nimport { selectFilter } from 'redux/selectors';\nimport { Label, Input } from './Filter.styled';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  const changeFilter = e => {\n    e.preventDefault();\n    dispatch(setFilter(e.currentTarget.value));\n  };\n  return (\n    <Label>\n      Find contacts by name\n      <Input type=\"text\" value={filter} onChange={changeFilter}></Input>\n    </Label>\n  );\n};\nexport default Filter;\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectIsLoading, selectError } from 'redux/selectors';\nimport { fetchContacts } from 'redux/operations';\nimport ContactList from 'components/ContactList/ContactList';\nimport { ContactForms } from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForms />\n      <h2>Contacts</h2>\n      <Filter />\n      {isLoading && !error && <b>Request in progress...</b>}\n      <ContactList />\n    </div>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","selectVisibleFilter","createSelector","contact","name","toLowerCase","includes","Item","styled","Btn","Text","id","number","dispatch","useDispatch","type","onClick","deleteContact","List","useSelector","map","phone","Forma","Form","Label","Input","Field","ContactForms","initialValues","onSubmit","values","resetForm","find","alert","addContact","autoComplete","htmlFor","pattern","title","required","value","onChange","e","preventDefault","setFilter","currentTarget","Contacts","useEffect","fetchContacts"],"sourceRoot":""}